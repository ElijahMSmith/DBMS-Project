/* eslint-disable jsx-a11y/img-redundant-alt */
import {
    Box,
    Button,
    Grid,
    Modal,
    Stack,
    TextField,
    Typography,
} from '@mui/material';
import { useEffect, useState } from 'react';
import axios from 'axios';
import UniversityAutocomplete from '../../components/UniversityAutocomplete';

const CREATE = 1;
const EDIT = 2;
const VIEW = 3;

const style = {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 1000,
    bgcolor: 'background.paper',
    border: '2px solid #000',
    boxShadow: 24,
    p: 4,
};

const RSOmodal = (props) => {
    const {
        mode,
        rso,
        open,
        setModalOpen,
        allUniversities,
        setSnackbar,
        refreshSearch,
    } = props;

    // Fixed fields, not editable by user
    // Generated by server if empty
    const rsoid = rso ? rso.rsoid : '';
    const uid = rso ? rso.uid : '';

    // Editable by user, if that is the mode.
    const [name, setName] = useState(rso ? rso.name : '');
    const [description, setDescription] = useState(rso ? rso.description : '');
    const [numMembers, setNumMembers] = useState(rso ? rso.numMembers : 0);

    // If creating, will have to select a university.
    // Not changeable in edit mode.
    const [university, setUniversity] = useState(null);
    const [memberEmails, setMemberEmails] = useState('');

    // Not changeable, retrieved by the server
    const [owner, setOwner] = useState(null);
    const [photoUrl, setPhotoUrl] = useState('');

    const handleError = (error) => {
        if (error.response) {
            // The request was made and the server responded with a status code
            // that falls out of the range of 2xx
            console.log(error.response.data);
            console.log(error.response.status);
            console.log(error.response.headers);
        } else if (error.request) {
            // The request was made but no response was received
            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
            // http.ClientRequest in node.js
            console.log(error.request);
        } else {
            // Something happened in setting up the request that triggered an Error
            console.log('Error', error.message);
        }
    };

    const buildNewRSO = () => {
        if (!university || !name || !description || numMembers === 0) return;

        const newRSO = {
            rsoid: rsoid.replace(/'/g, "''"),
            uid: uid.replace(/'/g, "''"),
            unid: university.unid.replace(/'/g, "''"),
            name: name.replace(/'/g, "''"),
            description: description.replace(/'/g, "''"),
            numMembers,
        };

        if (mode === EDIT) {
            axios
                .post('http://localhost:1433/rsos/', newRSO)
                .then((resp) => {
                    setSnackbar(true, 'success', 'Successfully updated RSO');
                })
                .catch((err) => handleError(err));
        } else if (mode === CREATE) {
            // TODOS
            /*
            - Change numMembers of RSO every time a user joins and leaves, dynamic counter rather than static
            - Creating a new RSO has a multiline area for adding emails of registered users to join
                - Verify there is an account for each email
                - Automatically join all the users attributed to those emails

            Need to decide now whether to make the numMembers responsive to join/leaves instead of fixed number or not
            IDK what the grade difference might be one way or the other, hopefully none

            In either case we need to validate each user exists
            If we are doing it dynamically, remove it from the body of any route requiring it
            */
        } // Not applicable for viewing

        refreshSearch();
    };

    const getOwner = () => {
        if (uid === '') return;
        axios
            .get(`http://localhost:1433/auth/find/?uid=${uid}`)
            .then((res) => {
                setOwner(res.data);
            })
            .catch((err) => handleError(err));
    };

    const getFirstPicture = () => {
        if (!university) return;
        axios
            .get(`http://localhost:1433/universities/?unid=${university.unid}`)
            .then((res) => {
                const photos = res.data.photos;

                if (photos.length > 0) setPhotoUrl(photos[0]);
                else setPhotoUrl('');
            })
            .catch((err) => handleError(err));
    };

    useEffect(() => {
        setName(rso ? rso.name : '');
        setDescription(rso ? rso.description : '');
        setNumMembers(rso ? rso.numMembers : 0);
        setUniversity(rso ? { name: rso.uname, unid: rso.unid } : null);
        getOwner();
        getFirstPicture();
    }, [open]);

    return (
        <Modal open={open} onClose={() => setModalOpen(false)}>
            {mode === VIEW ? (
                <Box sx={style}>
                    <Typography
                        variant="h4"
                        sx={{ textAlign: 'center', mt: 3, mb: 5 }}
                    >
                        {name}
                    </Typography>
                    <Typography sx={{ my: 1, textAlign: 'center' }}>
                        <u>Description</u>: {description}
                    </Typography>
                    <Typography sx={{ my: 1, textAlign: 'center' }}>
                        <u>Location</u>: {rso ? rso.uname : ''}
                    </Typography>
                    <Typography sx={{ my: 1, textAlign: 'center' }}>
                        <u>Member Count</u>: {numMembers}
                    </Typography>
                    <Typography sx={{ my: 1, textAlign: 'center' }}>
                        <u>Owner</u>:{' '}
                        {owner
                            ? owner.username + ' (' + owner.email + ')'
                            : 'Loading...'}
                    </Typography>
                    <div
                        className="image-container"
                        style={{
                            width: '100%',
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center',
                        }}
                    >
                        <img
                            src={photoUrl}
                            alt="Photo of matching university"
                            style={{
                                width: '80%',
                            }}
                        />
                    </div>
                </Box>
            ) : (
                <Box
                    sx={style}
                    component="form"
                    autoComplete="off"
                    onSubmit={(e) => e.preventDefault()}
                >
                    <Stack spacing={4}>
                        <Typography variant="h4" sx={{ textAlign: 'center' }}>
                            {mode === EDIT ? 'Edit' : 'Create New'} RSO
                        </Typography>
                        <Box>
                            <TextField
                                required
                                label="RSO Name"
                                variant="outlined"
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                                inputProps={{ maxLength: 40 }}
                                sx={{ width: '72.5%', mr: '2.5%' }}
                                helperText={`${name.length}/40`}
                                error={name.length === 0}
                            />

                            <TextField
                                required
                                label="Number of Members"
                                variant="outlined"
                                value={numMembers}
                                onChange={(e) => {
                                    if (
                                        e.target.value >= 0 &&
                                        e.target.value <= 999999
                                    )
                                        setNumMembers(e.target.value);
                                }}
                                inputProps={{
                                    maxLength: 6,
                                    type: 'number',
                                }}
                                sx={{ width: '25%' }}
                                helperText={`${String(numMembers).length}/6`}
                                error={numMembers <= 0 || numMembers % 1 !== 0}
                            />
                        </Box>

                        <TextField
                            required
                            label="RSO Description"
                            variant="outlined"
                            value={description}
                            onChange={(e) => setDescription(e.target.value)}
                            multiline
                            rows={3}
                            inputProps={{
                                maxLength: 300,
                            }}
                            sx={{ width: '100%' }}
                            helperText={`${description.length}/300`}
                            error={description.length === 0}
                        />

                        <UniversityAutocomplete
                            value={university}
                            setUniversity={setUniversity}
                            allUniversities={allUniversities}
                            width="100%"
                        />

                        {mode === CREATE ? (
                            <TextField
                                required
                                label="Member Emails (One Per Line)"
                                variant="outlined"
                                value={memberEmails}
                                onChange={(e) => {
                                    setMemberEmails(e.target.value);
                                    console.log(e.target.value);
                                }}
                                multiline
                                rows={3}
                                helperText="Each email must be a registered user on this system"
                                error={memberEmails.length === 0}
                            />
                        ) : null}

                        <Grid
                            container
                            direction="column"
                            alignItems="center"
                            justifyContent="center"
                            sx={{ width: '100%' }}
                        >
                            <Grid item xs={3}>
                                <Button
                                    type="submit"
                                    onClick={buildNewRSO}
                                    sx={{
                                        borderRadius: 2,
                                        outline: '1px solid',
                                    }}
                                >
                                    Submit
                                </Button>
                            </Grid>
                        </Grid>
                    </Stack>
                </Box>
            )}
        </Modal>
    );

    // TODO: call updateRSO with oldRSO (null if create) and newRSO (buildRSO)
};

export default RSOmodal;
